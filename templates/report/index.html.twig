{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Report</h1>

    <section>
    <h2>kmom01</h2>
<h3>Förkunskaper och tidigare erfarenheter kring objektorientering</h3> <p> Den enda objektorienterade programmering jag gjort innan den här kursen är i oopythonkursen. 
Kenneth nämnde det kort i JavaScript-kursen, men då var det inte aktuellt så jag la inte så mycket märke till det. Det ska bli intressant att börja koppla ihop det jag lärde mig i Python med hur 
objektorientering fungerar i PHP. </p> <h3>PHPs modell för klasser och objekt – grunder för att komma igång</h3> <p> Klasser i PHP fungerar som en mall för att skapa objekt. Det är ett sätt att organisera
 kod som hör ihop – både data (attribut) och funktionalitet (metoder). Objekt är instanser av en klass, vilket gör det möjligt att återanvända kod på ett strukturerat sätt. </p> <p> En viktig del är 
 konstruktorn <code>__construct</code>, som körs automatiskt när ett objekt skapas. Attributen kan vara <code>public</code>, <code>private</code> eller <code>protected</code>, beroende på hur åtkomsten 
 till dem ska begränsas. Det är också bra att känna till hur man skapar getter- och setter-metoder för att hämta eller ändra egenskaper. </p> <h3>Reflektion kring kodbasen för <code>me/report</code></h3> 
 <p> Kodbasen och strukturen i <code>me/report</code> påminner mycket om det vi jobbade med i webdesign-kursen. Det känns lite krångligt att vara beroende av så mycket extern programvara, särskilt när den
  inte alltid fungerar felfritt. </p> <p> Men det känns ändå bekant – jag tänkte nog likadant under designkursen i början, och det blev ju riktigt roligt när man väl förstod hur allt hängde ihop. </p> 
  <h3>Reflektion över “PHP The Right Way”</h3> <p> Just nu känns mycket av innehållet i artikeln som en massa torra termer. Men jag kan tänka mig att den kommer bli mer användbar längre fram, när man stöter
   på problem och behöver slå upp specifika saker. </p> <h3>TIL (“Today I Learned”) för detta kmom</h3> <p> Jag har lärt mig hur man installerar Symfony och börjat förstå hur man kan bygga en hel webbplats 
   med hjälp av ramverket. Det känns som ett spännande verktyg, särskilt nu i början när uppgifterna är ganska enkla och allt fungerar som det ska. </p> <p> Vi får se hur det känns när det börjar dyka upp 
   lite tuffare utmaningar senare i kursen. </p>
    <section>
     <h2>kmom02</h2>
<p>
    <strong>Vad är arv, komposition, interface och trait?</strong><br>
    Arv betyder att en klass kan ärva (ta) funktioner och egenskaper från en annan klass. I min kod är <code>CardGraphic</code> en klass som ärver från <code>Card</code>. Den får allt som <code>Card</code> har, och lägger till mer.<br><br>

    Komposition betyder att en klass använder andra objekt. Till exempel använder <code>DeckOfCards</code> många <code>Card</code>-objekt för att skapa en kortlek. Även <code>CardHand</code> använder flera kort.<br><br>

    Interface är som ett "avtal" som säger vilka metoder en klass måste ha. Jag använde inte interface i denna uppgift, men jag förstår hur man kan använda det om flera klasser ska ha samma funktioner.<br><br>

    Trait är ett sätt att återanvända kod i flera klasser. Jag använde inte trait i denna uppgift, men det kan vara bra om man vill dela kod mellan flera klasser.
</p>

<p>
    <strong>Min kod och hur jag löste uppgiften</strong><br>
    Jag har skapat dessa klasser:<br><br>
    <ul>
        <li><strong>Card:</strong> Ett vanligt kort med färg och värde.</li>
        <li><strong>CardGraphic:</strong> En klass som ärver från <code>Card</code>. Den visar kortet med symboler (♥, ♠, ♦, ♣).</li>
        <li><strong>DeckOfCards:</strong> Skapar en kortlek, blandar och låter spelaren dra kort.</li>
        <li><strong>CardHand:</strong> Sparar kort som spelaren har dragit.</li>
    </ul>
</p>

<p>
    Jag tycker att min lösning blev ganska bra. Koden fungerar och jag lärde mig mycket. Jag återanvände delar av kod och struktur från övningen med "Pig" och "Dice", vilket hjälpte mig att komma igång snabbare.
    Jag funderade på att dela upp min CSS i flera filer, men jag valde att inte göra det. Jag var orolig att det skulle bli för många filer, eftersom jag redan har många controllers, klasser och Twig-mallar. Därför behöll jag allt i en fil, för att hålla det enklare just nu.
</p>

<p>
    <strong>Att jobba med Symfony och MVC</strong><br>
    Symfony är ett stort ramverk, men det hjälper till att hålla ordning på koden. Det finns andra ramverk som kanske har mer funktioner eller är enklare på vissa sätt. Men för mig som nybörjare känns Symfony lagom. Det är tydligt hur man delar upp koden i <strong>Model</strong>, <strong>View</strong> och <strong>Controller</strong>, och det gör det lättare att förstå hur allt hänger ihop.
</p>

<p>
    <strong>TIL – Today I Learned</strong><br>
    Jag lärde mig mer om hur man använder klasser i PHP, hur man skapar objekt, och hur man visar information i Twig (HTML). Jag förstod också bättre hur man sparar data i sessioner och visar den senare. Symfony känns lite lättare nu.
</p>

    <section>
     <h2>kmom03</h2>
    <p></p>
    </section>
    <section>
     <h2>kmom04</h2>
    <p></p>
    </section>
    <section>
     <h2>kmom05</h2>
    <p></p>
    </section>
    <section>
     <h2>kmom06</h2>
    <p></p>
    </section>
    <section>
     <h2>kmom10</h2>
    <p></p>

    </section>
{% endblock %}
