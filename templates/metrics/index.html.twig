{% extends 'base.html.twig' %}

{% block title %}Kodkvalitet – Metricsanalys{% endblock %}

{% block body %}
<h1>Kodkvalitet: Metricsanalys</h1>

<h2>Introduktion</h2>
<p>
I denna rapport analyserar jag kvaliteten på min kod med hjälp av två verktyg: Phpmetrics och Scrutinizer. Jag utgår från de sex C:na:
</p>
<ul>
  <li><strong>Codestyle</strong> – Att skriva kod med en enhetlig stil, t.ex. indrag, namngivning och struktur.</li>
  <li><strong>Coverage</strong> – Hur stor del av koden som testas av automatiska tester.</li>
  <li><strong>Complexity</strong> – Hur krånglig och svår koden är att förstå. Mätvärdet cyclomatic complexity visar detta.</li>
  <li><strong>Cohesion</strong> – Om klasser/metoder har ett tydligt ansvar och håller ihop logiskt.</li>
  <li><strong>Coupling</strong> – Hur beroende olika delar av koden är av varandra.</li>
  <li><strong>CRAP</strong> – Ett kombinationsvärde av komplexitet och täckning, där höga värden visar risk.</li>
</ul>
<p>
Jag använder också Scrutinizers analys av "Code Smells" som en extra indikator.
</p>

<h2>Phpmetrics</h2>
<p>
Phpmetrics är ett verktyg som visar olika statistik om min kod.
</p>
<ul>
  <li><strong>Antal rader kod:</strong> 991</li>
  <li><strong>Antal klasser:</strong> 23 (ungefär 43 rader per klass)</li>
  <li><strong>Genomsnittlig komplexitet per klass:</strong> 2.3 (lågt och bra)</li>
  <li><strong>Beräknat antal buggar per klass:</strong> 0.07</li>
</ul>

<p>
En fil som sticker ut är <code>UserService.php</code> som har högre komplexitet än övriga filer. Detta innebär att metoderna är lite för långa eller gör för mycket. Den bör delas upp för att bli lättare att förstå och testa.
</p>

<!-- Lägg in Phpmetrics-bilden här -->
<div style="text-align:center; margin:2rem 0;">
  <img src="/assets/img/metrics.png" alt="Phpmetrics analys" style="max-width:100%; height:auto; border:1px solid #ccc; padding:0.5rem;">
  <figcaption>Phpmetrics - Sammanfattande statistik</figcaption>
</div>

<h2>Scrutinizer</h2>
<p>
Scrutinizer analyserar kodkvalitet, kodtäckning och struktur. Jag kopplar det till 6C-modellen.
</p>

<h3>Resultat:</h3>
<ul>
  <li><strong>Build:</strong> ✔️ Godkänd</li>
  <li><strong>Coverage:</strong> 📉 25%</li>
  <li><strong>Quality:</strong> 🧠 OK, men några "issues"</li>
</ul>

<h3>Koppling till 6C:</h3>
<table>
  <thead>
    <tr><th>6C</th><th>Reflektion</th></tr>
  </thead>
  <tbody>
    <tr><td>Correctness</td><td>Låg testtäckning gör att jag inte kan vara helt säker på att allt fungerar korrekt.</td></tr>
    <tr><td>Clarity</td><td>Vissa metoder är för komplexa, vilket gör dem svåra att läsa.</td></tr>
    <tr><td>Conciseness</td><td>Det finns kod som kan göras kortare och tydligare.</td></tr>
    <tr><td>Coherence</td><td>Strukturen på vissa delar av projektet är bra, men kan förbättras.</td></tr>
    <tr><td>Cohesion</td><td>Några klasser har för mycket ansvar. Bör delas upp.</td></tr>
    <tr><td>Completeness</td><td>Testtäckningen är låg, så jag vet inte om allt fungerar som det ska.</td></tr>
  </tbody>
</table>

<p>
Jag hade kunnat öka kodtäckningen till 70–75% genom att lägga till tester till exempelvis <code>HomeController</code> och <code>ReportController</code>. Men eftersom de är så enkla valde jag att inte lägga tid på det – det hade inte förbättrat kodkvaliteten på riktigt.
</p>

<!-- Lägg in Scrutinizer-bilden här -->
<div style="text-align:center; margin:2rem 0;">
  <img src="/assets/img/scrutinizer.png" alt="Scrutinizer analys" style="max-width:100%; height:auto; border:1px solid #ccc; padding:0.5rem;">
  <figcaption>Scrutinizer - Kodkvalitet och struktur</figcaption>
</div>

<h3>Badges</h3>
<p>
  <img src="https://scrutinizer-ci.com/g/mirNNes/me-report/badges/quality-score.png?b=main" alt="Quality">
  <img src="https://scrutinizer-ci.com/g/mirNNes/me-report/badges/coverage.png?b=main" alt="Coverage">
  <img src="https://scrutinizer-ci.com/g/mirNNes/me-report/badges/build.png?b=main" alt="Build">
</p>

<h2>Förbättringar</h2>
<p>
Jag valde att göra följande förbättringar:
</p>
<ul>
  <li>🧪 Öka testtäckning till minst 60% genom att fokusera på viktiga klasser och edge cases.</li>
  <li>🧹 Refaktorera metoder med hög komplexitet till mindre och tydligare funktioner.</li>
  <li>🐛 Fixa Scrutinizer-fel som oanvända variabler, lång kod, osv.</li>
  <li>📐 Följa PSR-standarder för snygg och enhetlig kod.</li>
</ul>

<h2>Resultat</h2>
<table>
  <thead>
    <tr><th>Mätvärde</th><th>Före</th><th>Efter</th></tr>
  </thead>
  <tbody>
    <tr><td>Coverage</td><td>25%</td><td>62%</td></tr>
    <tr><td>CRAP score</td><td>31</td><td>12</td></tr>
    <tr><td>Complexity (medel)</td><td>6.5</td><td>3.4</td></tr>
  </tbody>
</table>

<h2>Diskussion</h2>
<p>
Att jobba med verktyg som Scrutinizer och Phpmetrics gör det lättare att förstå vad som behöver förbättras i koden. Det är ett effektivt sätt att jobba mot clean code.

Fördelarna är att man får tydliga mätvärden att jobba mot, och att problemen blir synliga tidigt. Nackdelen är att det ibland blir för mycket fokus på siffror istället för faktisk funktion.

Jag har lärt mig att testbar kod oftast är bättre kod. Täckning på 100% betyder inte alltid kvalitet, men låg täckning visar nästan alltid på problem. Nästa gång vill jag använda dessa verktyg redan från början – det hade sparat mycket tid.

En annan insikt är att strukturfel i början kan leda till problem senare, som är svåra att fixa. Det påminner mig om poker: om du gör ett stort misstag i början av spelet, kan du inte rädda det i slutet hur bra du än spelar. Detsamma gäller kodkvalitet.
</p>

{% endblock %}
