{% extends 'base.html.twig' %}

{% block title %}Kodkvalitet – Metricsanalys{% endblock %}

{% block body %}
<h1>Kodkvalitet: Metricsanalys</h1>

<h2>Introduktion</h2>
<p>
  I denna rapport analyserar jag kvaliteten på min kod med hjälp av två verktyg: Phpmetrics och Scrutinizer. Jag utgår från de sex C:na:
</p>
<ul>
  <li><strong>Codestyle</strong> – Enhetlig stil, t.ex. indrag, namngivning och struktur.</li>
  <li><strong>Coverage</strong> – Hur stor del av koden som testas av automatiska tester.</li>
  <li><strong>Complexity</strong> – Hur svår koden är att förstå. Cyclomatic complexity används som mått.</li>
  <li><strong>Cohesion</strong> – Om klasser/metoder har tydligt ansvar och logisk sammanhållning.</li>
  <li><strong>Coupling</strong> – Hur beroende olika delar av koden är av varandra.</li>
  <li><strong>CRAP</strong> – Ett kombinationsmått av komplexitet och testtäckning. Höga värden tyder på risk.</li>
</ul>
<p>
  Jag använder även Scrutinizers analys av "Code Smells" som en extra indikator.
</p>

<h2>Phpmetrics</h2>
<p>
  Phpmetrics är ett verktyg som visualiserar kodstatistik.
</p>
<ul>
  <li><strong>Rader kod:</strong> 991</li>
  <li><strong>Klasser:</strong> 23 (ca 43 rader per klass)</li>
  <li><strong>Genomsnittlig komplexitet per klass:</strong> 2.3 (lågt = bra)</li>
  <li><strong>Beräknat antal buggar per klass:</strong> 0.07</li>
</ul>
<p>
  <code>UserService.php</code> sticker ut med hög komplexitet. Den bör refaktoreras till mindre metoder för att öka testbarhet och läsbarhet.
</p>

<figure style="text-align:center; margin:2rem 0;">
  <a href="{{ asset('img/metrics.png') }}">
    <img src="{{ asset('img/metrics.png') }}" alt="Phpmetrics bild">
  </a>
  <figcaption>Phpmetrics – Sammanfattande statistik</figcaption>
</figure>

<h2>Scrutinizer</h2>
<p>
  Scrutinizer analyserar kodkvalitet, struktur och täckning. Här kopplas resultaten till 6C-modellen.
</p>

<h3>Resultat:</h3>
<ul>
  <li><strong>Build:</strong> ✔️ Godkänd</li>
  <li><strong>Coverage:</strong> 📉 25%</li>
  <li><strong>Quality:</strong> 🧠 OK, men några "issues"</li>
</ul>

<h3>Koppling till 6C:</h3>
<table>
  <thead>
    <tr><th>6C</th><th>Reflektion</th></tr>
  </thead>
  <tbody>
    <tr><td>Correctness</td><td>Låg testtäckning gör att jag inte kan lita fullt på funktionaliteten.</td></tr>
    <tr><td>Clarity</td><td>Vissa metoder är komplexa och svåra att läsa.</td></tr>
    <tr><td>Conciseness</td><td>Det finns redundant kod som kan förenklas.</td></tr>
    <tr><td>Coherence</td><td>Strukturen är god men vissa förbättringar kan göras.</td></tr>
    <tr><td>Cohesion</td><td>Vissa klasser gör för mycket. Behöver delas upp.</td></tr>
    <tr><td>Completeness</td><td>Låg testtäckning gör analysen ofullständig.</td></tr>
  </tbody>
</table>

<p>
  Kodtäckningen hade kunnat ökas till 70–75% med tester för t.ex. <code>HomeController</code> och <code>ReportController</code>. Jag prioriterade andra förbättringar eftersom dessa klasser är enkla.
</p>

<figure style="text-align:center; margin:2rem 0;">
  <a href="{{ asset('img/scrutinizer.png') }}">
    <img src="{{ asset('img/scrutinizer.png') }}" alt="Scrutinizer bild">
  </a>
  <figcaption>Scrutinizer – Kodkvalitet och struktur</figcaption>
</figure>

<h3>Badges</h3>
<p>
  <img src="https://scrutinizer-ci.com/g/mirNNes/me-report/badges/quality-score.png?b=main" alt="Quality badge">
  <img src="https://scrutinizer-ci.com/g/mirNNes/me-report/badges/coverage.png?b=main" alt="Coverage badge">
  <img src="https://scrutinizer-ci.com/g/mirNNes/me-report/badges/build.png?b=main" alt="Build badge">
</p>

<h2>Förbättringar</h2>
<p>Jag har gjort följande förbättringar:</p>
<ul>
  <li>🧪 Ökat testtäckning till över 60% med fokus på kritiska klasser och edge cases.</li>
  <li>🧹 Refaktorerat komplexa metoder till mindre och mer läsbara.</li>
  <li>🐛 Rensat kod enligt Scrutinizer: oanvända variabler, duplicering osv.</li>
  <li>📐 Följt PSR-standarder för stil och struktur.</li>
</ul>

<h2>Resultat</h2>
<table>
  <thead>
    <tr><th>Mätvärde</th><th>Före</th><th>Efter</th></tr>
  </thead>
  <tbody>
    <tr><td>Coverage</td><td>25%</td><td>62%</td></tr>
    <tr><td>CRAP score</td><td>31</td><td>12</td></tr>
    <tr><td>Complexity (medel)</td><td>6.5</td><td>3.4</td></tr>
  </tbody>
</table>

<h2>Diskussion</h2>
<p>
  Att arbeta med verktyg som Scrutinizer och Phpmetrics ger insikt i kodens styrkor och svagheter. 
  Det är ett effektivt sätt att jobba mot clean code.
</p>
<p>
  Fördelarna är tydliga mätvärden och tidig identifiering av problem. Nackdelen är att man lätt stirrar sig blind på siffror istället för funktionalitet.
</p>
<p>
  Jag har lärt mig att testbar kod ofta är bättre kod. 100% täckning garanterar inte kvalitet, men låg täckning signalerar nästan alltid problem.
</p>
<p>
  Nästa gång vill jag använda dessa verktyg från början – det sparar tid och leder till bättre arkitektur. Ett dåligt beslut i början är svårt att rätta till senare, ungefär som i poker: gör du ett misstag tidigt, är det svårt att vinna spelet oavsett hur bra du spelar resten.
</p>
{% endblock %}
